
// This file is automatically generated

#ifndef MICROJIT_X86_64_PRIMITIVE_CONVERTER_H
#define MICROJIT_X86_64_PRIMITIVE_CONVERTER_H

#include "jit.h"
#include "primitive_conversion_map.gen.h"

namespace microjit {
    class x86_64PrimitiveConverter {
    private:
        struct VoidHasher {
            size_t _ALWAYS_INLINE_ operator()(const void* p_ptr) const {
                return (size_t)p_ptr;
            }
        };
        typedef Box<asmjit::x86::Assembler> Assembler;

        typedef void (*conversion_handler)(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset);

        // Converters
        static void convert_uint8_t_to_uint16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::al, asmjit::x86::byte_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::bx, asmjit::x86::al);
            p_assembler->mov(asmjit::x86::word_ptr(asmjit::x86::rsi), asmjit::x86::bx);

        }
        static void convert_uint8_t_to_uint32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::al, asmjit::x86::byte_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::ebx, asmjit::x86::al);
            p_assembler->mov(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::ebx);

        }
        static void convert_uint8_t_to_uint64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::al, asmjit::x86::byte_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::rbx, asmjit::x86::al);
            p_assembler->mov(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::rbx);

        }
        static void convert_uint8_t_to_int8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::al, asmjit::x86::byte_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bl, asmjit::x86::al);
            p_assembler->mov(asmjit::x86::byte_ptr(asmjit::x86::rsi), asmjit::x86::bl);

        }
        static void convert_uint8_t_to_int16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::al, asmjit::x86::byte_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::bx, asmjit::x86::al);
            p_assembler->mov(asmjit::x86::word_ptr(asmjit::x86::rsi), asmjit::x86::bx);

        }
        static void convert_uint8_t_to_int32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::al, asmjit::x86::byte_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::ebx, asmjit::x86::al);
            p_assembler->mov(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::ebx);

        }
        static void convert_uint8_t_to_int64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::al, asmjit::x86::byte_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::rbx, asmjit::x86::al);
            p_assembler->mov(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::rbx);

        }
        static void convert_uint8_t_to_float(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->movzx(asmjit::x86::ecx, asmjit::x86::al);
            p_assembler->cvtsi2ss(asmjit::x86::xmm1, asmjit::x86::ecx);
            p_assembler->movss(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);

        }
        static void convert_uint8_t_to_double(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->movzx(asmjit::x86::rcx, asmjit::x86::al);
            p_assembler->cvtsi2sd(asmjit::x86::xmm1, asmjit::x86::rcx);
            p_assembler->movsd(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);

        }
        static void convert_uint16_t_to_uint8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::ax, asmjit::x86::word_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bl, asmjit::x86::ax);
            p_assembler->mov(asmjit::x86::byte_ptr(asmjit::x86::rsi), asmjit::x86::bl);

        }
        static void convert_uint16_t_to_uint32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::ax, asmjit::x86::word_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::ebx, asmjit::x86::ax);
            p_assembler->mov(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::ebx);

        }
        static void convert_uint16_t_to_uint64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::ax, asmjit::x86::word_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::rbx, asmjit::x86::ax);
            p_assembler->mov(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::rbx);

        }
        static void convert_uint16_t_to_int8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::ax, asmjit::x86::word_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bl, asmjit::x86::ax);
            p_assembler->mov(asmjit::x86::byte_ptr(asmjit::x86::rsi), asmjit::x86::bl);

        }
        static void convert_uint16_t_to_int16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::ax, asmjit::x86::word_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bx, asmjit::x86::ax);
            p_assembler->mov(asmjit::x86::word_ptr(asmjit::x86::rsi), asmjit::x86::bx);

        }
        static void convert_uint16_t_to_int32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::ax, asmjit::x86::word_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::ebx, asmjit::x86::ax);
            p_assembler->mov(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::ebx);

        }
        static void convert_uint16_t_to_int64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::ax, asmjit::x86::word_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::rbx, asmjit::x86::ax);
            p_assembler->mov(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::rbx);

        }
        static void convert_uint16_t_to_float(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->movzx(asmjit::x86::ecx, asmjit::x86::ax);
            p_assembler->cvtsi2ss(asmjit::x86::xmm1, asmjit::x86::ecx);
            p_assembler->movss(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);

        }
        static void convert_uint16_t_to_double(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->movzx(asmjit::x86::rcx, asmjit::x86::ax);
            p_assembler->cvtsi2sd(asmjit::x86::xmm1, asmjit::x86::rcx);
            p_assembler->movsd(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);

        }
        static void convert_uint32_t_to_uint8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::eax, asmjit::x86::dword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bl, asmjit::x86::eax);
            p_assembler->mov(asmjit::x86::byte_ptr(asmjit::x86::rsi), asmjit::x86::bl);

        }
        static void convert_uint32_t_to_uint16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::eax, asmjit::x86::dword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bx, asmjit::x86::eax);
            p_assembler->mov(asmjit::x86::word_ptr(asmjit::x86::rsi), asmjit::x86::bx);

        }
        static void convert_uint32_t_to_uint64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::eax, asmjit::x86::dword_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::rbx, asmjit::x86::eax);
            p_assembler->mov(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::rbx);

        }
        static void convert_uint32_t_to_int8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::eax, asmjit::x86::dword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bl, asmjit::x86::eax);
            p_assembler->mov(asmjit::x86::byte_ptr(asmjit::x86::rsi), asmjit::x86::bl);

        }
        static void convert_uint32_t_to_int16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::eax, asmjit::x86::dword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bx, asmjit::x86::eax);
            p_assembler->mov(asmjit::x86::word_ptr(asmjit::x86::rsi), asmjit::x86::bx);

        }
        static void convert_uint32_t_to_int32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::eax, asmjit::x86::dword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::ebx, asmjit::x86::eax);
            p_assembler->mov(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::ebx);

        }
        static void convert_uint32_t_to_int64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::eax, asmjit::x86::dword_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::rbx, asmjit::x86::eax);
            p_assembler->mov(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::rbx);

        }
        static void convert_uint32_t_to_float(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->mov(asmjit::x86::ecx, asmjit::x86::eax);
            p_assembler->cvtsi2ss(asmjit::x86::xmm1, asmjit::x86::ecx);
            p_assembler->movss(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);

        }
        static void convert_uint32_t_to_double(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->movzx(asmjit::x86::rcx, asmjit::x86::eax);
            p_assembler->cvtsi2sd(asmjit::x86::xmm1, asmjit::x86::rcx);
            p_assembler->movsd(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);

        }
        static void convert_uint64_t_to_uint8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::rax, asmjit::x86::qword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bl, asmjit::x86::rax);
            p_assembler->mov(asmjit::x86::byte_ptr(asmjit::x86::rsi), asmjit::x86::bl);

        }
        static void convert_uint64_t_to_uint16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::rax, asmjit::x86::qword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bx, asmjit::x86::rax);
            p_assembler->mov(asmjit::x86::word_ptr(asmjit::x86::rsi), asmjit::x86::bx);

        }
        static void convert_uint64_t_to_uint32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::rax, asmjit::x86::qword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::ebx, asmjit::x86::rax);
            p_assembler->mov(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::ebx);

        }
        static void convert_uint64_t_to_int8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::rax, asmjit::x86::qword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bl, asmjit::x86::rax);
            p_assembler->mov(asmjit::x86::byte_ptr(asmjit::x86::rsi), asmjit::x86::bl);

        }
        static void convert_uint64_t_to_int16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::rax, asmjit::x86::qword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bx, asmjit::x86::rax);
            p_assembler->mov(asmjit::x86::word_ptr(asmjit::x86::rsi), asmjit::x86::bx);

        }
        static void convert_uint64_t_to_int32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::rax, asmjit::x86::qword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::ebx, asmjit::x86::rax);
            p_assembler->mov(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::ebx);

        }
        static void convert_uint64_t_to_int64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::rax, asmjit::x86::qword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::rbx, asmjit::x86::rax);
            p_assembler->mov(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::rbx);

        }
        static void convert_uint64_t_to_float(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->mov(asmjit::x86::ecx, asmjit::x86::rax);
            p_assembler->cvtsi2ss(asmjit::x86::xmm1, asmjit::x86::ecx);
            p_assembler->movss(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);

        }
        static void convert_uint64_t_to_double(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->mov(asmjit::x86::rcx, asmjit::x86::rax);
            p_assembler->cvtsi2sd(asmjit::x86::xmm1, asmjit::x86::rcx);
            p_assembler->movsd(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);

        }
        static void convert_int8_t_to_uint8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::al, asmjit::x86::byte_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bl, asmjit::x86::al);
            p_assembler->mov(asmjit::x86::byte_ptr(asmjit::x86::rsi), asmjit::x86::bl);

        }
        static void convert_int8_t_to_uint16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::al, asmjit::x86::byte_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::bx, asmjit::x86::al);
            p_assembler->mov(asmjit::x86::word_ptr(asmjit::x86::rsi), asmjit::x86::bx);

        }
        static void convert_int8_t_to_uint32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::al, asmjit::x86::byte_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::ebx, asmjit::x86::al);
            p_assembler->mov(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::ebx);

        }
        static void convert_int8_t_to_uint64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::al, asmjit::x86::byte_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::rbx, asmjit::x86::al);
            p_assembler->mov(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::rbx);

        }
        static void convert_int8_t_to_int16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::al, asmjit::x86::byte_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::bx, asmjit::x86::al);
            p_assembler->mov(asmjit::x86::word_ptr(asmjit::x86::rsi), asmjit::x86::bx);

        }
        static void convert_int8_t_to_int32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::al, asmjit::x86::byte_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::ebx, asmjit::x86::al);
            p_assembler->mov(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::ebx);

        }
        static void convert_int8_t_to_int64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::al, asmjit::x86::byte_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::rbx, asmjit::x86::al);
            p_assembler->mov(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::rbx);

        }
        static void convert_int8_t_to_float(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->movzx(asmjit::x86::ecx, asmjit::x86::al);
            p_assembler->fild(asmjit::x86::byte_ptr(asmjit::x86::rdi));
            p_assembler->movss(asmjit::x86::xmm1, asmjit::x86::qword_ptr(asmjit::x86::rsp));
            p_assembler->movss(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);
            p_assembler->fstp(asmjit::x86::byte_ptr(asmjit::x86::rsp));

        }
        static void convert_int8_t_to_double(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->movzx(asmjit::x86::rcx, asmjit::x86::al);
            p_assembler->fild(asmjit::x86::byte_ptr(asmjit::x86::rdi));
            p_assembler->movsd(asmjit::x86::xmm1, asmjit::x86::qword_ptr(asmjit::x86::rsp));
            p_assembler->movsd(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);
            p_assembler->fstp(asmjit::x86::byte_ptr(asmjit::x86::rsp));

        }
        static void convert_int16_t_to_uint8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::ax, asmjit::x86::word_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bl, asmjit::x86::ax);
            p_assembler->mov(asmjit::x86::byte_ptr(asmjit::x86::rsi), asmjit::x86::bl);

        }
        static void convert_int16_t_to_uint16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::ax, asmjit::x86::word_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bx, asmjit::x86::ax);
            p_assembler->mov(asmjit::x86::word_ptr(asmjit::x86::rsi), asmjit::x86::bx);

        }
        static void convert_int16_t_to_uint32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::ax, asmjit::x86::word_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::ebx, asmjit::x86::ax);
            p_assembler->mov(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::ebx);

        }
        static void convert_int16_t_to_uint64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::ax, asmjit::x86::word_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::rbx, asmjit::x86::ax);
            p_assembler->mov(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::rbx);

        }
        static void convert_int16_t_to_int8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::ax, asmjit::x86::word_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bl, asmjit::x86::ax);
            p_assembler->mov(asmjit::x86::byte_ptr(asmjit::x86::rsi), asmjit::x86::bl);

        }
        static void convert_int16_t_to_int32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::ax, asmjit::x86::word_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::ebx, asmjit::x86::ax);
            p_assembler->mov(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::ebx);

        }
        static void convert_int16_t_to_int64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::ax, asmjit::x86::word_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::rbx, asmjit::x86::ax);
            p_assembler->mov(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::rbx);

        }
        static void convert_int16_t_to_float(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->movzx(asmjit::x86::ecx, asmjit::x86::ax);
            p_assembler->fild(asmjit::x86::word_ptr(asmjit::x86::rdi));
            p_assembler->movss(asmjit::x86::xmm1, asmjit::x86::qword_ptr(asmjit::x86::rsp));
            p_assembler->movss(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);
            p_assembler->fstp(asmjit::x86::word_ptr(asmjit::x86::rsp));

        }
        static void convert_int16_t_to_double(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->movzx(asmjit::x86::rcx, asmjit::x86::ax);
            p_assembler->fild(asmjit::x86::word_ptr(asmjit::x86::rdi));
            p_assembler->movsd(asmjit::x86::xmm1, asmjit::x86::qword_ptr(asmjit::x86::rsp));
            p_assembler->movsd(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);
            p_assembler->fstp(asmjit::x86::word_ptr(asmjit::x86::rsp));

        }
        static void convert_int32_t_to_uint8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::eax, asmjit::x86::dword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bl, asmjit::x86::eax);
            p_assembler->mov(asmjit::x86::byte_ptr(asmjit::x86::rsi), asmjit::x86::bl);

        }
        static void convert_int32_t_to_uint16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::eax, asmjit::x86::dword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bx, asmjit::x86::eax);
            p_assembler->mov(asmjit::x86::word_ptr(asmjit::x86::rsi), asmjit::x86::bx);

        }
        static void convert_int32_t_to_uint32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::eax, asmjit::x86::dword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::ebx, asmjit::x86::eax);
            p_assembler->mov(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::ebx);

        }
        static void convert_int32_t_to_uint64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::eax, asmjit::x86::dword_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::rbx, asmjit::x86::eax);
            p_assembler->mov(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::rbx);

        }
        static void convert_int32_t_to_int8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::eax, asmjit::x86::dword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bl, asmjit::x86::eax);
            p_assembler->mov(asmjit::x86::byte_ptr(asmjit::x86::rsi), asmjit::x86::bl);

        }
        static void convert_int32_t_to_int16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::eax, asmjit::x86::dword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bx, asmjit::x86::eax);
            p_assembler->mov(asmjit::x86::word_ptr(asmjit::x86::rsi), asmjit::x86::bx);

        }
        static void convert_int32_t_to_int64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::eax, asmjit::x86::dword_ptr(asmjit::x86::rdi));

            p_assembler->movzx(asmjit::x86::rbx, asmjit::x86::eax);
            p_assembler->mov(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::rbx);

        }
        static void convert_int32_t_to_float(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->mov(asmjit::x86::ecx, asmjit::x86::eax);
            p_assembler->fild(asmjit::x86::dword_ptr(asmjit::x86::rdi));
            p_assembler->movss(asmjit::x86::xmm1, asmjit::x86::qword_ptr(asmjit::x86::rsp));
            p_assembler->movss(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);
            p_assembler->fstp(asmjit::x86::dword_ptr(asmjit::x86::rsp));

        }
        static void convert_int32_t_to_double(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->movzx(asmjit::x86::rcx, asmjit::x86::eax);
            p_assembler->fild(asmjit::x86::dword_ptr(asmjit::x86::rdi));
            p_assembler->movsd(asmjit::x86::xmm1, asmjit::x86::qword_ptr(asmjit::x86::rsp));
            p_assembler->movsd(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);
            p_assembler->fstp(asmjit::x86::dword_ptr(asmjit::x86::rsp));

        }
        static void convert_int64_t_to_uint8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::rax, asmjit::x86::qword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bl, asmjit::x86::rax);
            p_assembler->mov(asmjit::x86::byte_ptr(asmjit::x86::rsi), asmjit::x86::bl);

        }
        static void convert_int64_t_to_uint16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::rax, asmjit::x86::qword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bx, asmjit::x86::rax);
            p_assembler->mov(asmjit::x86::word_ptr(asmjit::x86::rsi), asmjit::x86::bx);

        }
        static void convert_int64_t_to_uint32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::rax, asmjit::x86::qword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::ebx, asmjit::x86::rax);
            p_assembler->mov(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::ebx);

        }
        static void convert_int64_t_to_uint64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::rax, asmjit::x86::qword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::rbx, asmjit::x86::rax);
            p_assembler->mov(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::rbx);

        }
        static void convert_int64_t_to_int8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::rax, asmjit::x86::qword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bl, asmjit::x86::rax);
            p_assembler->mov(asmjit::x86::byte_ptr(asmjit::x86::rsi), asmjit::x86::bl);

        }
        static void convert_int64_t_to_int16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::rax, asmjit::x86::qword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::bx, asmjit::x86::rax);
            p_assembler->mov(asmjit::x86::word_ptr(asmjit::x86::rsi), asmjit::x86::bx);

        }
        static void convert_int64_t_to_int32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));
            //Move from value into a register
            p_assembler->mov(asmjit::x86::rax, asmjit::x86::qword_ptr(asmjit::x86::rdi));

            p_assembler->mov(asmjit::x86::ebx, asmjit::x86::rax);
            p_assembler->mov(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::ebx);

        }
        static void convert_int64_t_to_float(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->mov(asmjit::x86::ecx, asmjit::x86::rax);
            p_assembler->fild(asmjit::x86::qword_ptr(asmjit::x86::rdi));
            p_assembler->movss(asmjit::x86::xmm1, asmjit::x86::qword_ptr(asmjit::x86::rsp));
            p_assembler->movss(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);
            p_assembler->fstp(asmjit::x86::qword_ptr(asmjit::x86::rsp));

        }
        static void convert_int64_t_to_double(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->mov(asmjit::x86::rcx, asmjit::x86::rax);
            p_assembler->fild(asmjit::x86::qword_ptr(asmjit::x86::rdi));
            p_assembler->movsd(asmjit::x86::xmm1, asmjit::x86::qword_ptr(asmjit::x86::rsp));
            p_assembler->movsd(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);
            p_assembler->fstp(asmjit::x86::qword_ptr(asmjit::x86::rsp));

        }
        static void convert_float_to_uint8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const float*, uint8_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_float_to_uint16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const float*, uint16_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_float_to_uint32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const float*, uint32_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_float_to_uint64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const float*, uint64_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_float_to_int8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const float*, int8_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_float_to_int16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const float*, int16_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_float_to_int32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const float*, int32_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_float_to_int64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const float*, int64_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_float_to_double(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->cvtss2sd(asmjit::x86::xmm1, asmjit::x86::xmm0);
            p_assembler->movsd(asmjit::x86::qword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);

        }
        static void convert_double_to_uint8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const double*, uint8_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_double_to_uint16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const double*, uint16_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_double_to_uint32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const double*, uint32_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_double_to_uint64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const double*, uint64_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_double_to_int8_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const double*, int8_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_double_to_int16_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const double*, int16_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_double_to_int32_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const double*, int32_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_double_to_int64_t(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            void (*f)(const double*, int64_t*) = PrimitiveConversionHelper::conversion_candidate;
            p_assembler->call(f);

        }
        static void convert_double_to_float(Assembler& p_assembler, const int64_t& p_vstack_loc, const int64_t& p_from_vstack_offset, const int64_t& p_to_vstack_offset) {
            //Load from address into rdi
            p_assembler->mov(asmjit::x86::rdi, asmjit::x86::qword_ptr(asmjit::x86::rbp, int32_t(p_vstack_loc)));
            p_assembler->mov(asmjit::x86::rsi, asmjit::x86::rdi);
            p_assembler->sub(asmjit::x86::rdi, std::abs(p_from_vstack_offset));
            //Load to address into rsi
            p_assembler->sub(asmjit::x86::rsi, std::abs(p_to_vstack_offset));

            p_assembler->cvtsd2ss(asmjit::x86::xmm0, asmjit::x86::xmm0);
            p_assembler->movss(asmjit::x86::xmm1, asmjit::x86::xmm0);
            p_assembler->movss(asmjit::x86::dword_ptr(asmjit::x86::rsi), asmjit::x86::xmm1);

        }

        // Converter getters
        static conversion_handler get_converter(void (*)(const uint8_t*, uint16_t*)) { return convert_uint8_t_to_uint16_t; }
        static conversion_handler get_converter(void (*)(const uint8_t*, uint32_t*)) { return convert_uint8_t_to_uint32_t; }
        static conversion_handler get_converter(void (*)(const uint8_t*, uint64_t*)) { return convert_uint8_t_to_uint64_t; }
        static conversion_handler get_converter(void (*)(const uint8_t*, int8_t*)) { return convert_uint8_t_to_int8_t; }
        static conversion_handler get_converter(void (*)(const uint8_t*, int16_t*)) { return convert_uint8_t_to_int16_t; }
        static conversion_handler get_converter(void (*)(const uint8_t*, int32_t*)) { return convert_uint8_t_to_int32_t; }
        static conversion_handler get_converter(void (*)(const uint8_t*, int64_t*)) { return convert_uint8_t_to_int64_t; }
        static conversion_handler get_converter(void (*)(const uint8_t*, float*)) { return convert_uint8_t_to_float; }
        static conversion_handler get_converter(void (*)(const uint8_t*, double*)) { return convert_uint8_t_to_double; }
        static conversion_handler get_converter(void (*)(const uint16_t*, uint8_t*)) { return convert_uint16_t_to_uint8_t; }
        static conversion_handler get_converter(void (*)(const uint16_t*, uint32_t*)) { return convert_uint16_t_to_uint32_t; }
        static conversion_handler get_converter(void (*)(const uint16_t*, uint64_t*)) { return convert_uint16_t_to_uint64_t; }
        static conversion_handler get_converter(void (*)(const uint16_t*, int8_t*)) { return convert_uint16_t_to_int8_t; }
        static conversion_handler get_converter(void (*)(const uint16_t*, int16_t*)) { return convert_uint16_t_to_int16_t; }
        static conversion_handler get_converter(void (*)(const uint16_t*, int32_t*)) { return convert_uint16_t_to_int32_t; }
        static conversion_handler get_converter(void (*)(const uint16_t*, int64_t*)) { return convert_uint16_t_to_int64_t; }
        static conversion_handler get_converter(void (*)(const uint16_t*, float*)) { return convert_uint16_t_to_float; }
        static conversion_handler get_converter(void (*)(const uint16_t*, double*)) { return convert_uint16_t_to_double; }
        static conversion_handler get_converter(void (*)(const uint32_t*, uint8_t*)) { return convert_uint32_t_to_uint8_t; }
        static conversion_handler get_converter(void (*)(const uint32_t*, uint16_t*)) { return convert_uint32_t_to_uint16_t; }
        static conversion_handler get_converter(void (*)(const uint32_t*, uint64_t*)) { return convert_uint32_t_to_uint64_t; }
        static conversion_handler get_converter(void (*)(const uint32_t*, int8_t*)) { return convert_uint32_t_to_int8_t; }
        static conversion_handler get_converter(void (*)(const uint32_t*, int16_t*)) { return convert_uint32_t_to_int16_t; }
        static conversion_handler get_converter(void (*)(const uint32_t*, int32_t*)) { return convert_uint32_t_to_int32_t; }
        static conversion_handler get_converter(void (*)(const uint32_t*, int64_t*)) { return convert_uint32_t_to_int64_t; }
        static conversion_handler get_converter(void (*)(const uint32_t*, float*)) { return convert_uint32_t_to_float; }
        static conversion_handler get_converter(void (*)(const uint32_t*, double*)) { return convert_uint32_t_to_double; }
        static conversion_handler get_converter(void (*)(const uint64_t*, uint8_t*)) { return convert_uint64_t_to_uint8_t; }
        static conversion_handler get_converter(void (*)(const uint64_t*, uint16_t*)) { return convert_uint64_t_to_uint16_t; }
        static conversion_handler get_converter(void (*)(const uint64_t*, uint32_t*)) { return convert_uint64_t_to_uint32_t; }
        static conversion_handler get_converter(void (*)(const uint64_t*, int8_t*)) { return convert_uint64_t_to_int8_t; }
        static conversion_handler get_converter(void (*)(const uint64_t*, int16_t*)) { return convert_uint64_t_to_int16_t; }
        static conversion_handler get_converter(void (*)(const uint64_t*, int32_t*)) { return convert_uint64_t_to_int32_t; }
        static conversion_handler get_converter(void (*)(const uint64_t*, int64_t*)) { return convert_uint64_t_to_int64_t; }
        static conversion_handler get_converter(void (*)(const uint64_t*, float*)) { return convert_uint64_t_to_float; }
        static conversion_handler get_converter(void (*)(const uint64_t*, double*)) { return convert_uint64_t_to_double; }
        static conversion_handler get_converter(void (*)(const int8_t*, uint8_t*)) { return convert_int8_t_to_uint8_t; }
        static conversion_handler get_converter(void (*)(const int8_t*, uint16_t*)) { return convert_int8_t_to_uint16_t; }
        static conversion_handler get_converter(void (*)(const int8_t*, uint32_t*)) { return convert_int8_t_to_uint32_t; }
        static conversion_handler get_converter(void (*)(const int8_t*, uint64_t*)) { return convert_int8_t_to_uint64_t; }
        static conversion_handler get_converter(void (*)(const int8_t*, int16_t*)) { return convert_int8_t_to_int16_t; }
        static conversion_handler get_converter(void (*)(const int8_t*, int32_t*)) { return convert_int8_t_to_int32_t; }
        static conversion_handler get_converter(void (*)(const int8_t*, int64_t*)) { return convert_int8_t_to_int64_t; }
        static conversion_handler get_converter(void (*)(const int8_t*, float*)) { return convert_int8_t_to_float; }
        static conversion_handler get_converter(void (*)(const int8_t*, double*)) { return convert_int8_t_to_double; }
        static conversion_handler get_converter(void (*)(const int16_t*, uint8_t*)) { return convert_int16_t_to_uint8_t; }
        static conversion_handler get_converter(void (*)(const int16_t*, uint16_t*)) { return convert_int16_t_to_uint16_t; }
        static conversion_handler get_converter(void (*)(const int16_t*, uint32_t*)) { return convert_int16_t_to_uint32_t; }
        static conversion_handler get_converter(void (*)(const int16_t*, uint64_t*)) { return convert_int16_t_to_uint64_t; }
        static conversion_handler get_converter(void (*)(const int16_t*, int8_t*)) { return convert_int16_t_to_int8_t; }
        static conversion_handler get_converter(void (*)(const int16_t*, int32_t*)) { return convert_int16_t_to_int32_t; }
        static conversion_handler get_converter(void (*)(const int16_t*, int64_t*)) { return convert_int16_t_to_int64_t; }
        static conversion_handler get_converter(void (*)(const int16_t*, float*)) { return convert_int16_t_to_float; }
        static conversion_handler get_converter(void (*)(const int16_t*, double*)) { return convert_int16_t_to_double; }
        static conversion_handler get_converter(void (*)(const int32_t*, uint8_t*)) { return convert_int32_t_to_uint8_t; }
        static conversion_handler get_converter(void (*)(const int32_t*, uint16_t*)) { return convert_int32_t_to_uint16_t; }
        static conversion_handler get_converter(void (*)(const int32_t*, uint32_t*)) { return convert_int32_t_to_uint32_t; }
        static conversion_handler get_converter(void (*)(const int32_t*, uint64_t*)) { return convert_int32_t_to_uint64_t; }
        static conversion_handler get_converter(void (*)(const int32_t*, int8_t*)) { return convert_int32_t_to_int8_t; }
        static conversion_handler get_converter(void (*)(const int32_t*, int16_t*)) { return convert_int32_t_to_int16_t; }
        static conversion_handler get_converter(void (*)(const int32_t*, int64_t*)) { return convert_int32_t_to_int64_t; }
        static conversion_handler get_converter(void (*)(const int32_t*, float*)) { return convert_int32_t_to_float; }
        static conversion_handler get_converter(void (*)(const int32_t*, double*)) { return convert_int32_t_to_double; }
        static conversion_handler get_converter(void (*)(const int64_t*, uint8_t*)) { return convert_int64_t_to_uint8_t; }
        static conversion_handler get_converter(void (*)(const int64_t*, uint16_t*)) { return convert_int64_t_to_uint16_t; }
        static conversion_handler get_converter(void (*)(const int64_t*, uint32_t*)) { return convert_int64_t_to_uint32_t; }
        static conversion_handler get_converter(void (*)(const int64_t*, uint64_t*)) { return convert_int64_t_to_uint64_t; }
        static conversion_handler get_converter(void (*)(const int64_t*, int8_t*)) { return convert_int64_t_to_int8_t; }
        static conversion_handler get_converter(void (*)(const int64_t*, int16_t*)) { return convert_int64_t_to_int16_t; }
        static conversion_handler get_converter(void (*)(const int64_t*, int32_t*)) { return convert_int64_t_to_int32_t; }
        static conversion_handler get_converter(void (*)(const int64_t*, float*)) { return convert_int64_t_to_float; }
        static conversion_handler get_converter(void (*)(const int64_t*, double*)) { return convert_int64_t_to_double; }
        static conversion_handler get_converter(void (*)(const float*, uint8_t*)) { return convert_float_to_uint8_t; }
        static conversion_handler get_converter(void (*)(const float*, uint16_t*)) { return convert_float_to_uint16_t; }
        static conversion_handler get_converter(void (*)(const float*, uint32_t*)) { return convert_float_to_uint32_t; }
        static conversion_handler get_converter(void (*)(const float*, uint64_t*)) { return convert_float_to_uint64_t; }
        static conversion_handler get_converter(void (*)(const float*, int8_t*)) { return convert_float_to_int8_t; }
        static conversion_handler get_converter(void (*)(const float*, int16_t*)) { return convert_float_to_int16_t; }
        static conversion_handler get_converter(void (*)(const float*, int32_t*)) { return convert_float_to_int32_t; }
        static conversion_handler get_converter(void (*)(const float*, int64_t*)) { return convert_float_to_int64_t; }
        static conversion_handler get_converter(void (*)(const float*, double*)) { return convert_float_to_double; }
        static conversion_handler get_converter(void (*)(const double*, uint8_t*)) { return convert_double_to_uint8_t; }
        static conversion_handler get_converter(void (*)(const double*, uint16_t*)) { return convert_double_to_uint16_t; }
        static conversion_handler get_converter(void (*)(const double*, uint32_t*)) { return convert_double_to_uint32_t; }
        static conversion_handler get_converter(void (*)(const double*, uint64_t*)) { return convert_double_to_uint64_t; }
        static conversion_handler get_converter(void (*)(const double*, int8_t*)) { return convert_double_to_int8_t; }
        static conversion_handler get_converter(void (*)(const double*, int16_t*)) { return convert_double_to_int16_t; }
        static conversion_handler get_converter(void (*)(const double*, int32_t*)) { return convert_double_to_int32_t; }
        static conversion_handler get_converter(void (*)(const double*, int64_t*)) { return convert_double_to_int64_t; }
        static conversion_handler get_converter(void (*)(const double*, float*)) { return convert_double_to_float; }



        std::unordered_map<const void*, conversion_handler, VoidHasher> handler_map{};
        void setup() {
            { void (*f)(const uint8_t*, uint16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint8_t*, uint32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint8_t*, uint64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint8_t*, int8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint8_t*, int16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint8_t*, int32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint8_t*, int64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint8_t*, float*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint8_t*, double*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint16_t*, uint8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint16_t*, uint32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint16_t*, uint64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint16_t*, int8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint16_t*, int16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint16_t*, int32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint16_t*, int64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint16_t*, float*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint16_t*, double*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint32_t*, uint8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint32_t*, uint16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint32_t*, uint64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint32_t*, int8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint32_t*, int16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint32_t*, int32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint32_t*, int64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint32_t*, float*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint32_t*, double*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint64_t*, uint8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint64_t*, uint16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint64_t*, uint32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint64_t*, int8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint64_t*, int16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint64_t*, int32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint64_t*, int64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint64_t*, float*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const uint64_t*, double*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int8_t*, uint8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int8_t*, uint16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int8_t*, uint32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int8_t*, uint64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int8_t*, int16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int8_t*, int32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int8_t*, int64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int8_t*, float*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int8_t*, double*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int16_t*, uint8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int16_t*, uint16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int16_t*, uint32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int16_t*, uint64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int16_t*, int8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int16_t*, int32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int16_t*, int64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int16_t*, float*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int16_t*, double*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int32_t*, uint8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int32_t*, uint16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int32_t*, uint32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int32_t*, uint64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int32_t*, int8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int32_t*, int16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int32_t*, int64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int32_t*, float*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int32_t*, double*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int64_t*, uint8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int64_t*, uint16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int64_t*, uint32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int64_t*, uint64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int64_t*, int8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int64_t*, int16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int64_t*, int32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int64_t*, float*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const int64_t*, double*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const float*, uint8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const float*, uint16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const float*, uint32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const float*, uint64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const float*, int8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const float*, int16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const float*, int32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const float*, int64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const float*, double*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const double*, uint8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const double*, uint16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const double*, uint32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const double*, uint64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const double*, int8_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const double*, int16_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const double*, int32_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const double*, int64_t*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }
            { void (*f)(const double*, float*) = nullptr; f = PrimitiveConversionHelper::conversion_candidate; handler_map[(const void*)f] = get_converter(f); }

        }
    public:
        x86_64PrimitiveConverter() { setup(); }
        
        conversion_handler get_handler(const void* p_key) const { return handler_map.at(p_key); }
        
        template <typename From, typename To>
        static conversion_handler get_converter() {
            static constexpr void (*f)(const From*, To*) = nullptr;
            return get_converter(f);
        }
    };
}


#endif //MICROJIT_X86_64_PRIMITIVE_CONVERTER_H
